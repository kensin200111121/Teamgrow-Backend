name: TeamGrow Build to ECR
on:
  push:
    branches: [master]

jobs:
  deploy_server:
    name: Deploy Server
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: crmg-webapi
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        aws s3 cp s3://cloudformation-teamgrow/ENV ./.env
        aws s3 cp s3://cloudformation-teamgrow/MAIN_BACKEND_NPM_CONFIG ./.npmrc
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: crmg-webapi
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: crmg-webapi	
        cluster: crmg-ecs
        wait-for-service-stability: true

  deploy_cronjob:
    name: Deploy Cronjob
    environment: production
    runs-on: self-hosted
    steps:
      - name: Configure SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: trigger deploy_prod.py
        run: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@13.59.230.72 'deploy_prod.py'

  run_db_migration:
    name: Run DB migration
    environment: production
    runs-on: self-hosted
    steps:
      - name: Configure SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: trigger run_db_migration.py
        run: ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@13.59.230.72 'run_db_migration.py'
